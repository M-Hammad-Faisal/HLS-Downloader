name: Build and Release

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            executable_ext: .exe
          - os: macos-latest
            platform: macos
            arch: x64
            executable_ext: ""
          - os: macos-14
            platform: macos
            arch: arm64
            executable_ext: ""

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install --cask firefox
        brew install playwright

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install firefox -y

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install Playwright browsers
      run: |
        playwright install firefox
        playwright install-deps firefox

    - name: Create build script
      shell: bash
      run: |
        cat > build.py << 'EOF'
        import PyInstaller.__main__
        import sys
        import os
        
        # Determine platform-specific settings
        platform = "${{ matrix.platform }}"
        arch = "${{ matrix.arch }}"
        
        # Base arguments for PyInstaller
        args = [
            'main.py',
            '--name=HLS Downloader',
            '--windowed',
            '--onefile',
            '--add-data=hlsdownloader:hlsdownloader',
            '--hidden-import=PyQt5.QtCore',
            '--hidden-import=PyQt5.QtGui',
            '--hidden-import=PyQt5.QtWidgets',
            '--hidden-import=aiohttp',
            '--hidden-import=playwright',
            '--hidden-import=asyncio',
            '--collect-all=playwright',
            '--collect-all=aiohttp',
        ]
        
        # Platform-specific configurations
        if platform == "windows":
            args.extend([
                '--icon=assets/icon.ico' if os.path.exists('assets/icon.ico') else '',
                '--console',  # Keep console for debugging
            ])
        elif platform == "macos":
            args.extend([
                '--icon=assets/icon.icns' if os.path.exists('assets/icon.icns') else '',
                '--osx-bundle-identifier=com.hlsdownloader.app',
            ])
        
        # Remove empty strings
        args = [arg for arg in args if arg]
        
        print(f"Building for {platform} {arch}")
        print(f"PyInstaller args: {args}")
        
        PyInstaller.__main__.run(args)
        EOF

    - name: Build executable
      run: python build.py

    - name: Create release directory
      shell: bash
      run: |
        mkdir -p release
        if [ "${{ runner.os }}" == "Windows" ]; then
          cp "dist/HLS Downloader.exe" "release/HLS-Downloader-${{ matrix.platform }}-${{ matrix.arch }}.exe"
        else
          cp "dist/HLS Downloader" "release/HLS-Downloader-${{ matrix.platform }}-${{ matrix.arch }}"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: HLS-Downloader-${{ matrix.platform }}-${{ matrix.arch }}
        path: release/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}